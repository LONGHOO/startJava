<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.crud.mapper.CustomertransferMapper">
  <resultMap id="BaseResultMap" type="cn.wolfcode.crud.domain.Customertransfer">
    <id column="id" property="id" />
    <result column="operate_time" property="operateTime" />
    <result column="reason" property="reason" />
    <association property="customer" javaType="cn.wolfcode.crud.domain.Customer" columnPrefix="c_">
      <id column="id" property="id" />
      <result column="name" property="name" />
    </association>
    <association property="operator" javaType="cn.wolfcode.crud.domain.Employee" columnPrefix="o_">
      <id column="id" property="id" />
      <result column="name" property="name" />
    </association>
    <association property="oldseller" javaType="cn.wolfcode.crud.domain.Employee" columnPrefix="os_">
      <id column="id" property="id" />
      <result column="name" property="name" />
    </association>
    <association property="newseller" javaType="cn.wolfcode.crud.domain.Employee" columnPrefix="ns_">
      <id column="id" property="id" />
      <result column="name" property="name" />
    </association>
  </resultMap>
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    insert into customertransfer (customer_id, operator_id, operate_time, oldSeller_id, newSeller_id,
      reason)
    values (#{customer.id}, #{operator.id}, #{operateTime}, #{oldseller.id}, #{newseller.id},
      #{reason})
  </insert>
  <select id="selectForList" resultMap="BaseResultMap">
    select his.id,
           his.operate_time,
           his.reason,
           c.id c_id,
           c.name c_name,
           o.id o_id,
           o.name o_name,
           os.id os_id,
           os.name os_name,
           ns.id ns_id,
           ns.name ns_name
    from customertransfer his
    left join customer c on c.id = his.customer_id
    left join employee o on o.id = his.operator_id
    left join employee os on os.id = his.oldSeller_id
    left join employee ns on ns.id = his.newSeller_id
      <where>
          <if test="keyword!=null">
              and (c.name like concat('%',#{keyword},'%') or c.tel like concat('%',#{keyword},'%'))
          </if>
      </where>
  </select>


  <!--<delete id="deleteByPrimaryKey">
    delete from customertransfer
    where id = #{id}
  </delete>-->
  <!--<update id="updateByPrimaryKey">
    update customertransfer
    set customer_id = #{customerId},
      operator_id = #{operatorId},
      operate_time = #{operateTime},
      oldSeller_id = #{oldsellerId},
      newSeller_id = #{newsellerId},
      reason = #{reason}
    where id = #{id}
  </update>-->
  <!--<select id="selectByPrimaryKey" resultMap="BaseResultMap">
    select id, customer_id, operator_id, operate_time, oldSeller_id, newSeller_id, reason
    from customertransfer
    where id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, customer_id, operator_id, operate_time, oldSeller_id, newSeller_id, reason
    from customertransfer
  </select>-->
</mapper>